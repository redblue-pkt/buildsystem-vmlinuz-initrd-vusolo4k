#! /bin/sh

export PATH=/bin:/sbin:/usr/bin:/usr/sbin:.

echo "Mounting virtual filesystems"
mkdir -p /sys /proc /dev
mount -t proc proc /proc
mount -t sysfs sys /sys
if grep -qs debugfs /proc/filesystems; then
	mount -t debugfs debugfs /sys/kernel/debug
fi
if grep -qs configfs /proc/filesystems; then
	mount -t configfs none /sys/kernel/config
fi
grep -q devtmpfs /proc/mounts || mount -t devtmpfs none /dev
mkdir -p /dev/pts
mount -t devpts devpts /dev/pts
mount -t tmpfs -o mode=01777 tmpfs /tmp
mkdir -p /dev/shm
mount -t tmpfs -o noexec,nosuid,nodev,mode=1777 shm /dev/shm

if [ -e /etc/sysctl.conf ]; then
	for conf in /etc/sysctl.conf /etc/sysctl.d/*.conf; do
		if [ -r "$conf" ]; then
			sysctl -p "$conf" > /dev/null
		fi
	done
fi

echo "/sbin/stbhotplug" > /proc/sys/kernel/hotplug

if [ ! -z "$BASH_VERSION" ]; then
	# Recovery from missing /dev/console (works on bash but not ash)
	exec < /dev/console >& /dev/console
fi

# Don't let SCHED_FIFO / SCHED_RR realtime threads get preempted
echo -1 > /proc/sys/kernel/sched_rt_runtime_us

# settings default host name
hostname recovery

# By default, switch to conservative governor on SoCs with AVS CPUfreq only
cpufreq-info -d | egrep '(brcm.*avs|scmi)' >/dev/null
if [ $? = 0 ]; then
	# Check if system supports the conservative governor and enable it
	cpufreq-info -g | grep conservative >/dev/null
	if [ $? = 0 ]; then
		echo "Switching to conservative governor"
		cpufreq-set -g conservative
	fi
fi

# GPLv3 warning
if [ -e /bin/gdbserver -o -e /bin/gdb ]; then
	echo "* WARNING: THIS STB CONTAINS GPLv3 SOFTWARE"
	echo "* GPLv3 programs must be removed in order to enable security."
	echo "* See: http://www.gnu.org/licenses/gpl-faq.html#Tivoization"
fi

# -small configuration: do not start any other services automatically
if [ ! -e /bin/login ]; then
	[ -f /root/rc.user ] && sh /root/rc.user
	exit 0
fi

# Set up MoCA link, if present
[ -e /dev/bmoca0 ] && mocacfg boot &

cmdline=`cat /proc/cmdline`

if [[ "$cmdline" != *nfsroot=* ]]; then
	# Make sure ethX appear(s) first, which is relevant for DSA enabled
	# systems where ethX (conduit interface) needs to be brought up first
	# before all other DSA created network interfaces
	ifaces="$(ls /sys/class/net | grep eth) $(ls /sys/class/net | grep -v eth)"
	for x in $ifaces; do
		echo "Configuring $x interface"
		/sbin/ifdown $x
		/sbin/ifup $x
		sleep 3
	done
else
	# just configure loopback
	/sbin/ifup lo
fi

# Set up WLAN, if present
if [ -e /etc/wl/rtecdc.trx -a -x /bin/bcmdl ]; then
	bcmdl /etc/wl/rtecdc.trx
fi
[ -e /lib/modules/wl.ko ] && insmod /lib/modules/wl.ko

# rootfs on SATA hard disk (but not sda4-less thumbdrive)
if [ -e /dev/root -a "`readlink /dev/root`" = "sda1" -a -e /dev/sda4 ]; then
	mount -o remount,noatime,commit=1 /
	mount -a
	swapon -a
fi

echo "Starting network services"
proftpd -c /etc/proftpd.conf
portmap &
telnetd

if [ -e /sbin/dropbear ]; then
	if [ ! -e /etc/dropbear/dropbear_rsa_host_key ]; then
		mkdir -p /etc/dropbear
		dropbearkey -t rsa -f /etc/dropbear/dropbear_rsa_host_key
		dropbearkey -t dss -f /etc/dropbear/dropbear_dss_host_key
	fi
	dropbear -B
fi

if [ -f /root/rc.user ]; then
	echo "Starting user services"
	/bin/sh /root/rc.user
fi
